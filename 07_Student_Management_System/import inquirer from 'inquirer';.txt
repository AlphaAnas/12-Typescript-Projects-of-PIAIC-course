import inquirer from 'inquirer';
import chalk from 'chalk';

class Student {
  private static idCounter = 10000;
  public studentID: string;
  public name: string;
  public courses: string[];
  public balance: number;

  constructor(name: string) {
    this.name = name;
    this.studentID = this.generateStudentID();
    this.courses = [];
    this.balance = 0;
  }

  private generateStudentID(): string {
    Student.idCounter++;
    return Student.idCounter.toString();
  }

  enroll(course: string, fee: number): void {
    this.courses.push(course);
    this.balance += fee;
  }

  payTuition(amount: number): void {
    this.balance -= amount;
  }

  showStatus(): void {
    console.log(chalk.bold(`\nStudent Name: ${this.name}`));
    console.log(chalk.bold(`Student ID: ${this.studentID}`));
    console.log(chalk.bold(`Courses Enrolled: ${this.courses.join(', ')}`));
    console.log(chalk.bold(`Balance: $${this.balance}\n`));
  }
}

class StudentManagementSystem {
  private students: Student[] = [];

  async addStudent(): Promise<void> {
    const input = await inquirer.prompt([
      {
        name: 'name',
        type: 'input',
        message: 'Enter student name: ',
      },
    ]);

    const student = new Student(input.name);
    this.students.push(student);
    console.log(chalk.green(`Student ${student.name} added with ID: ${student.studentID}`));
  }

  async enrollStudent(): Promise<void> {
    const student = await this.selectStudent();
    const input = await inquirer.prompt([
      {
        name: 'course',
        type: 'input',
        message: 'Enter course name: ',
      },
      {
        name: 'fee',
        type: 'number',
        message: 'Enter course fee: ',
      },
    ]);

    student.enroll(input.course, input.fee);
    console.log(chalk.green(`Enrolled in course: ${input.course}`));
  }

  async viewBalance(): Promise<void> {
    const student = await this.selectStudent();
    console.log(chalk.bold(`Balance: $${student.balance}`));
  }

  async payTuition(): Promise<void> {
    const student = await this.selectStudent();
    const input = await inquirer.prompt([
      {
        name: 'amount',
        type: 'number',
        message: 'Enter payment amount: ',
      },
    ]);

    student.payTuition(input.amount);
    console.log(chalk.green(`Paid $${input.amount}. New balance: $${student.balance}`));
  }

  async showStatus(): Promise<void> {
    const student = await this.selectStudent();
    student.showStatus();
  }

  private async selectStudent(): Promise<Student> {
    const choices = this.students.map((student, index) => ({
      name: `${student.name} (ID: ${student.studentID})`,
      value: index,
    }));

    const input = await inquirer.prompt([
      {
        name: 'selectedStudent',
        type: 'list',
        message: 'Select a student: ',
        choices,
      },
    ]);

    return this.students[input.selectedStudent];
  }

  async mainMenu(): Promise<void> {
    while (true) {
      const input = await inquirer.prompt([
        {
          name: 'action',
          type: 'list',
          message: 'Choose an action: ',
          choices: [
            'Add Student',
            'Enroll Student in Course',
            'View Balance',
            'Pay Tuition',
            'Show Status',
            'Exit',
          ],
        },
      ]);

      switch (input.action) {
        case 'Add Student':
          await this.addStudent();
          break;
        case 'Enroll Student in Course':
          await this.enrollStudent();
          break;
        case 'View Balance':
          await this.viewBalance();
          break;
        case 'Pay Tuition':
          await this.payTuition();
          break;
        case 'Show Status':
          await this.showStatus();
          break;
        case 'Exit':
          return;
      }
    }
  }
}

const sms = new StudentManagementSystem();
sms.mainMenu();
